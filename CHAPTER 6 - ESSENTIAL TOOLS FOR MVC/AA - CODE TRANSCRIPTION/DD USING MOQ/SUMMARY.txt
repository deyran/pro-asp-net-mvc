DD USING MOQ -> 145
    "Mocking is a process used in unit testing when the unit being tested has external dependencies. The purpose of mocking is to isolate and focus on the code being tested and not on the behavior or state of external dependecies. In mocking, the dependecies are replaced by closely controlled replacemanets objects that simulate the behavior of the real ones. [...]"
    Font: https://www.telerik.com/products/mocking/unit-testing.aspx
    Date: 07-05-21

    The Moq object is useful for:
        1 - Class that depends on other classes to work
        2 - Simulate the functionality of real objects, but in a specific and controlled way 
        3 - Narrow the focus, so that you only examine the functionality in which you are interested

DDAA UNDERSTANDING THE PROBLEM -> 146
    >> Listing 6-31. The contents of the LinqValueCalculator.cs file -> 146
    >> Listing 6-32. Add a Unit Test for the ShoppingCart class in the UnitTest2.cs file -> 146

DDBB ADDING MOQ TO THE VISUAL STUDIO PROJECT -> 147
DDCC A MOCK OBJECT TO A UNIT TEST -> 147
    >> Listing 6-33. Using a Mock object in a Unit Test in the UnitTest2.cs file -> 147
    >> CREATING A MOCK OBJECT -> 148
    >> SELECTING A METHOD -> 149
    >> DEFINING THE RESULT -> 150
    >> USING THE MOCK OBJECT -> 150

DDDD CREATING A MORE COMPLEX MOCK OBJECT -> 150
    >> Listing 6-34. Mocking the behavior of the MinimumDiscountHelper class in the UnitTest1.cs file -> 151
    >> MOCKING FOR SPECIFIC VALUES (AND THROWING AN EXCEPTION) -> 152
    >> MOCKING FOR A RANGE OF VALUES -> 153
-----------------------------------------------------------------------------------------------------------

DD USING MOQ -> 145
DDAA UNDERSTANDING THE PROBLEM -> 146
>> Listing 6-31. The contents of the LinqValueCalculator.cs file -> 146