BB USING NINJECT -> 123
    To recap what was seen in chapter 3, we highlight some points
        1 - Decouple the components in an MVC application
        2 - Combinations of Dependency Injection (DI), Interfaces and DI container

BBAA UNDERSTANDING THE PROBLEM -> 123
    >> APPLYING AN INTERFACE -> 123
    >>>> Listing 6-6. The contents of the IValueCalculator.cs file -> 123
    >>>> Listing 6-7. Applying an interface in the LinqValueCalculator.cs file -> 124
    >>>> Listing 6-8. Applying the interface in the ShoppingCart.cs -> 124
    >>>> Listing 6-9. Applying the interface to the HomeController.cs -> 124

BBBB ADDING NINJECT TO THE VISUAL STUDIO PROJECT -> 125
BBCC GETTING STARTED WITH NINJECT -> 125
    >> Listing 6-10. Adding the basic Ninject functionality to the index action method in the HomeController.cs file -> 125

BBDD SETTING UP MVC DEPENDENCY INJECTION -> 127
    >> CREATING THE DEPENDENCY RESOLVER -> 127
    >>>> Listing 6-11. The content of the NinjectDependencyResolver.cs file -> 127

    >> REGISTER THE DEPENDECY RESOLVER -> 128
    >>>> Listing 6-12. Registering the Resolver in the NinjectWebCommom.cs file -> 128

    >> REFACTORING THE HOME CONTROLLER -> 128
    >>>> Listing 6-13. Refactoring the controller in the HomeController.cs file -> 128
    >>>> Figure 6-2. The effect of running the example app

BBEE CREATING CHAINS OF DEPENDENCY -> 130
    >> Listing 6-14. The contents of the Discount.cs file -> 130
    >> Listing 6-15. Adding a Dependency in the LinqValueCalculator.cs file -> 130
    >> Listing 6-16. Binding another interface to its implementation in the NinjectDependencyResolver.cs file -> 131

BBFF SPECIFYING PROPERTY AND CONSTRUCTOR PARAMETER VALUES -> 131
    >> Listing 6-17. Adding a property in the Discount.cs file -> 131
    >> Listing 6-18. Using the Ninject WithPropertyValue method in the NinjectDependencyResolver.cs file -> 132
    >> Figure 6-3. The effect of applying a discount through a property when resolving the dependency chain -> 132
    >> Listing 6-19. Using a constructor property in the Discount.cs file -> 132
    >> Listing 6-20. Specifying a constructor parameter in the NinjectDependencyresolver.cs -> 132
    >> Listing 6-16. Binding another interface to its implementation in the NinjectDependencyResolver.cs file

BBGG USING CONDITIONAL BINDING -> 133
    >> Listing 6-21. The contents of the FlexibleDiscountHelper.cs file -> 133
    >> Listing 6-22. Using conditional binding in the NinjectDependencyResolver.cs -> 134

BBHH SETTING THE OBJECT SCOPE -> 134
    >> Listing 6-23. Adding a construction in the LinqValueCalculator.cs file -> 134
    >> Listing 6-24. Using multiple instance of the calculator class in the HomeController.cs -> 135
    >> Listing 6-25. Using the request scope in the NinjectDependencyResolver.cs file -> 135

------------------------------------------------------------------------------

BB USING NINJECT -> 123
BBAA UNDERSTANDING THE PROBLEM -> 123
>> APPLYING AN INTERFACE -> 123
>>>> Listing 6-7. Applying an interface in the LinqValueCalculator.cs file -> 124