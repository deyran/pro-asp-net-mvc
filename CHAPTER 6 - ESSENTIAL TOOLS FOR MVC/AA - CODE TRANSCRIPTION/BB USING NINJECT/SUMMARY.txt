BB USING NINJECT -> 123
    To recap what was seen in chapter 3, we highlight some points
        1 - Decouple the components in an MVC application
        2 - Combinations of Dependency Injection (DI), Interfaces and DI container

BBAA UNDERSTANDING THE PROBLEM -> 123
    -> The example app is an example of the problem that DI addresses -> TIGHTLY COUPLED CLASSES
    -> We can see Tightly coupled in these cases:
        1 - The ShoppingCart and LinqValueCalculator class
        2 - The HomeController class with ShoppingCart and LinqValueCalculator classes

    >> APPLYING AN INTERFACE -> 123
    >>>> Listing 6-6. The contents of the IValueCalculator.cs file -> 123
    >>>> Listing 6-7. Applying an interface in the LinqValueCalculator.cs file -> 124
    >>>> Listing 6-8. Applying the interface in the ShoppingCart.cs -> 124
    >>>> Listing 6-9. Applying the interface to the HomeController.cs -> 124

BBBB ADDING NINJECT TO THE VISUAL STUDIO PROJECT -> 125
    1 - Package Manager Console:
        > Tools > Library Package Manager > Package Manager Console

        Install-Package Ninject -version 3.0.1.10
        Install-Package Ninject.Web.Common -version 3.0.0.7
        Install-Package Ninject.MVC3 -Version 3.0.0.6

    2 - Commands:
        Install-Package Ninject -version 3.0.1.10
        Install-Package Ninject.Web.Common -version 3.0.0.7
        Install-Package Ninject.MVC3 -Version 3.0.0.6
        
BBCC GETTING STARTED WITH NINJECT -> 125
    >> Listing 6-10. Adding the basic Ninject functionality to the index action method in the HomeController.cs file -> 125
        1 - The instance of a Ninject kernel is the object responsable for resolving dependencies and creating new objects.
            ...
            IKernel ninjectKernel = new StandardKernel();
            ...
        2 - For the Ninject kernel to understand which object to implement in each interface we are working with, it is necessary to configure it. The statement below tells Ninject that dependencies on the IValueCalculator interface should be resolved by creating an instance of the LinqValueCalculator class
            ...
            ninjectKernel.Bind<IValueCalculator>().To<LinqValueCalculator>();
            ...
        3 - The type parameter used for the "Get" method tells Ninject which interface I am interested in and the result from this method is an instance of the implementation type I specified with the "To" method, as we can see in the statement below:
            ...
            IValueCalculator calc = ninjectKernel.Get<IValueCalculator>();
            ...    

BBDD SETTING UP MVC DEPENDENCY INJECTION -> 127
    >> CREATING THE DEPENDENCY RESOLVER -> 127
        >>>> The MVC Framework uses a Dependency Resolver to create instances of the classes it needs to services request
        >>>> Create a new folder called "Infrastructure" and create class called NinjectDependencyResolver.cs in the folder
        >>>> Listing 6-11. The content of the NinjectDependencyResolver.cs file -> 127
            >>>>>>>> IDependencyResolver is part of the System.Mvc namespace
            >>>>>>>> The MVC Framework will call the GetSevices and GetServices methods when it needs an instance of a class to services an incoming request.
            >>>>>>>> In the AddBinding method, is used to configure relationship between the IValueCalculator interface and the LinqValueCalculator class        

    >> REGISTER THE DEPENDECY RESOLVER -> 128
        >>>> Listing 6-12. Registering the Resolver in the NinjectWebCommom.cs file -> 128
            1 - In the "App_Start" open the NinjectWebCommon.cs file
            2 - In the RegisterServices method, write the code below:
                ...
                private static void RegisterServices(IKernel kernel)
                {
                    System.Web.DependencyResolver.SetResolver
                    (
                        EssentialTools.Infrastructure.NinjectDependencyResolver(kernel)
                    );
                }
                ...    
    >> REFACTORING THE HOME CONTROLLER -> 128
        >>>> Listing 6-13. Refactoring the controller in the HomeController.cs file -> 128
            >>>>>>>> In the code below, we highlight two important points: 
                1 - A constructor injection (Which one form of dependency injection); 
                2 - Ninject will provide an object that implements the IValueCalculator interface when it creates an instance of the controller, using NinjectDependencyResolver class in Listing 6-10

                ...
                public HomeController(IValueCalculator calcParam)
                {
                    calc = calcParam;
                }
                ...
            >>>>>>>> Figure 6-2. The effect of running the example app

BBEE CREATING CHAINS OF DEPENDENCY -> 130
    >> If there are additional dependencies, Ninject automatically resolves them and creates instaces of all of the classes that are required
    >> Listing 6-14. The contents of the Discount.cs file -> 130
    >> Listing 6-15. Adding a Dependency in the LinqValueCalculator.cs file -> 130
    >> Listing 6-16. Binding another interface to its implementation in the NinjectDependencyResolver.cs file -> 131

BBFF SPECIFYING PROPERTY AND CONSTRUCTOR PARAMETER VALUES -> 131
    >> Listing 6-17. Adding a property in the Discount.cs file -> 131
    >> Listing 6-18. Using the Ninject WithPropertyValue method in the NinjectDependencyResolver.cs file -> 132
    >> Figure 6-3. The effect of applying a discount through a property when resolving the dependency chain -> 132
    >> Listing 6-19. Using a constructor property in the Discount.cs file -> 132
    >> Listing 6-20. Specifying a constructor parameter in the NinjectDependencyresolver.cs -> 132
    >> Listing 6-16. Binding another interface to its implementation in the NinjectDependencyResolver.cs file

BBGG USING CONDITIONAL BINDING -> 133
    >> Listing 6-21. The contents of the FlexibleDiscountHelper.cs file -> 133
    >> Listing 6-22. Using conditional binding in the NinjectDependencyResolver.cs -> 134

BBHH SETTING THE OBJECT SCOPE -> 134
    >> Listing 6-23. Adding a construction in the LinqValueCalculator.cs file -> 134
    >> Listing 6-24. Using multiple instance of the calculator class in the HomeController.cs -> 135
    >> Listing 6-25. Using the request scope in the NinjectDependencyResolver.cs file -> 135
------------------------------------------------------------------------------

BB USING NINJECT -> 123
BBFF SPECIFYING PROPERTY AND CONSTRUCTOR PARAMETER VALUES -> 131
>> Listing 6-19. Using a constructor property in the Discount.cs file -> 132