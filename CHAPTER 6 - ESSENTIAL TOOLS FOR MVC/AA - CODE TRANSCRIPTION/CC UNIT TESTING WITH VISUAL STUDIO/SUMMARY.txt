CC UNIT TESTING WITH VISUAL STUDIO -> 137
    In this book, the test package that will be used is NUnit due to integration with the rest of the IDE. To demonstrate this support, a new implementation of the IDiscountHelper interface will be created, and it will be called MinimumDiscountHelper.cs. As seen in Listing 6-26
        
        >> Listing 6-26. The contents of the MinimumDiscountHelper.cs -> 137

    The MinimumDiscountHelper.cs class is not yet implemented, The Test Driven Development (TDD) approach of writing the unit test will be used and only then will the code be implemented

CCAA CREATING THE UNIT TEST PROJECT -> 137
    >> Figure 6-4A. Creating the unit test project
        1 - Right-click on the top level on the Solution "EssentialTools".
        2 - Add -> New Project.
        3 - In the first select component (All language), choose "C#".
        4 - In the second select component (All platforms), you don't need to change anything at all.
        5 - In the third select component (All project types), choose "Test".
        6 - Choose the project templates called "Unit Test Project (.Net Framework)".
        7 - Click on the Next button.

    >> Figure 6-4B. On the "Configure your new project" screen, follow these steps:
        1 - Set the project name to "EssencialTools.Tests"
        2 - Click on the Create button
    
    >> It's necessary to give the test project a reference to the application project so that it can access the classes and perform tests upon them
        >>>> Figure 6-5. Adding a reference to the MVC project -> 138
            1 - Right-click on the EssentialTools.Tests project;
            2 - Choose "Add" > "Reference ..."
            3 - Click Solution in the left panel
            4 - Check the box to the EssentialTools
            5 - Click on the Ok buttons            

CCBB CREATING THE UNIT TESTS -> 139
    >> Listing 6-27. Adding the Test methods to the UnitTest1.cs file -> 139
        1. A class that contains tests is annotated with the TestClass attribute. 
        2. Individual tests are methods annotated with the TestMethod attribute.
        3. Methods without TestMethod attribute Visual Studio will not treat it as a unit test
    
        >>>> The AAA (Arrange, Act, Assert) pattern
            The AAA pattern is a common way of writing unit for a method under test.
                1. The Arrange section of a unit test method initializes objects and sets the value of the data that is passed to the method under test.
                2. The Act section invokes the method under test with the arranged paramenters.
                3. The Aseert section verifies that the action of the method under test behaves as expected.

                FONTE: https://docs.microsoft.com/en-us/visualstudio/test/unit-test-basics?view=vs-2019
                DATE: 08-11-21

        >>>> There are countless conventions about how to name unit tests, but my advice is simply that you use names that make it clear what test is checking. The unit test method used in the listing 6-27 was Discount_Above_100, which is clear and meaningful.

        >>>> The Assert class has a range of static methods that you can use in your tests. The class is in the Microsoft.VisualStudio.TestTools.UnitTesting namespace along with some additional classes that can be useful for setting up and performing tests.

    >> Listing 6-28. Defining the Remaining tests in the UnitTest1.cs file -> 141

CCCC RUNNING THE UNIT TESTS (AND FAILING) -> 142
    Visual Studio provides a Test Explorer windows for managinh and running tests. To access the Test Explorer windows you need to go to Visual Studio menu, choose Viewm and then choose Test Explorer. After that click the Run all button [...]. You will see results similar to the ones shownnn in figure 6-6        
        >> Figure 6-6. Running the tests in the project -> 143

    >> IMPLEMENTING THE FEATURE -> 143
    >>>> Listing 6-29. The contents of the MinimumDiscountHelper.cs file -> 143

CCDD TESTING AND FIXING THE CODE -> 144
    >> Figure 6-7. The effect of implementation the feature with a bug -> 144
        A deliberate error was left to demonstrate how iterative unit testing with VS works and you can see the effect of the error if click the Run all button in the test. (See Figure 6-7)    

    >> Listing 6-30. Fixing the feature code in the MinimumDiscountHelper.cs file -> 144
    >> Figure 6-8. Passing all of the unit tests -> 145
-----------------------------------------------------------------------------------------------------------

CC UNIT TESTING WITH VISUAL STUDIO -> 137
CCCC RUNNING THE UNIT TESTS (AND FAILING) -> 142
>> IMPLEMENTING THE FEATURE -> 143
>>>> Listing 6-29. The contents of the MinimumDiscountHelper.cs file -> 143
