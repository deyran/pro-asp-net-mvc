The Unit Test for the ability to produce a category list simple, sorted in alphabetical order and contains no duplates. 
A mock repository was created that contains repeated categories without alphabetical order and contains duplicate items.
The duplicates are removed and that alphabetical ordering is imposed, as you can see in the code below:

public void Can_Create_Categories()
{
	// Arrange
	// - create the mock repository
	Mock<IProductRepository> mock = new Mock<IProductRepository>();
	mock.Setup(m => m.Products).Returns(
		new Products[]
		{
			new Product {ProductID = 1, Name = "P1", Category = "Apples"},
			new Product {ProductID = 2, Name = "P2", Category = "Apples"},
			new Product {ProductID = 3, Name = "P3", Category = "Plums"},
			new Product {ProductID = 4, Name = "P4", Category = "Oranges"}
		}
	);

	// Arrange - create the controller
	NavController target = new NavController(mock.Object);

	// Act = get the set of categories
	strings[] results = ((IEnumerable<string>)target.Menu().Model).ToArray();	

	// Assert
	Assert.AreEqual(results.Length, 3);
	Assert.AreEqual(results[0], "Apples");
	Assert.AreEqual(results[1], "Oranges");
	Assert.AreEqual(results[2], "Plums");

}
=====================================================================================================================================