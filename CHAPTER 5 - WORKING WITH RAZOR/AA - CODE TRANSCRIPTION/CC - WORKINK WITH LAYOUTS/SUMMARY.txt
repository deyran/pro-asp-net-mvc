>> WORKINK WITH LAYOUTS -> 99
    ...
    @{    
        Layout = null;
    }
    ...

    > This Razor code block allows to include C# statemants in a view. 
    > Razor views are compiled into C# class in an MVC application and the base class that is used defines the Layout property
    > When the Layout property is set to null tells the MVC framework that the view is self-contained and will render all the content required for the client.

>>>> CREATING THE LAYOUT -> 100
    1 - Right-click on the View folder;
    2 - Add -> New Item
    3 - Select MVC 5 Layout Page (Razor) template
    4 - Set the name -> "_BasicLayout.cshtml"
    5 - Click the "Add" button

    #NOTE -> File in the Views folder whose names begin with an underscore (_) are not returned to the user, which allows the file name to differente between views that you want to render and the files that support them. Layouts, which are support files, are prefixed with an underscore.

    >>>>>>>> Listing 5-5. The initial contents of the _BasicLayout.cshtml file -> 101
        > The call to the @RenderBody method inserts the contents of the view specified by the action method into layout markup
        > The elements in the layout will be applied to any view that uses the layout and this is why layouts are essentially templates

    >>>>>>>> Listing 5-6. Adding elements to the _BasicLayout.cshtml file -> 101

>>>> APPLYING A LAYOUT -> 102
    To apply the layout to the view, I just need to set the value of the Layout property.

    >>>>>>>> Listing 5-7. Using the Layout property in the Index.cshtml file -> 102

>>>> USING A VIEW START FILE
>>>> DEMONSTRATING SHARED LAYOUTS
------------------------------------------------------------------------------------------------

>> WORKINK WITH LAYOUTS -> 99
>>>> CREATING THE LAYOUT -> 100
>>>>>>>> Listing 5-7. Using the Layout property in the Index.cshtml file -> 102